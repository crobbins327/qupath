plugins {
  id 'qupath.extension-conventions'
  id 'qupath.publishing-conventions'
  id 'java-library'
}

ext.moduleName = 'qupath.extension.bioformats'
archivesBaseName = 'qupath-extension-bioformats'
description = "QuPath extension to support image reading and writing using Bio-Formats."

def bioformatsVersion = libs.versions.bioformats.get()
def versionOverride = project.properties.getOrDefault('bioformats-version', null)
if (versionOverride) {
	println "Using specified Bio-Formats version ${versionOverride}"
	bioformatsVersion = versionOverride
}


dependencies {
	// This can be used to include bioformats_package.jar - however it causes warnings with SLF4J
//  implementation("ome:bioformats_package:${bioformatsVersion}") {
//  	transitive = false
//  }

  implementation libs.controlsfx
  implementation libs.picocli

  implementation "ome:formats-gpl:${bioformatsVersion}", {
    exclude group: 'xalan', module: 'serializer'
    exclude group: 'xalan', module: 'xalan'
    exclude group: 'io.minio', module: 'minio'
    exclude group: 'commons-codec', module: 'commons-codec'
    exclude group: 'commons-logging', module: 'commons-logging'
//        exclude group: 'edu.ucar', module: 'cdm'
    exclude group: 'com.google.code.findbugs', module: 'jsr305'
    exclude group: 'com.google.code.findbugs', module: 'annotations'
  }

//  testImplementation("ome:bioformats_package:${bioformatsVersion}")
  testImplementation "ome:bio-formats_plugins:${bioformatsVersion}"
  
  testImplementation libs.imagej
  
}
